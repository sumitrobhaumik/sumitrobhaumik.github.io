{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! This is Sumitro. This is my personal blog. The content of this blog will mainly be technical, specifically about linux systems and its related technologies, with a random life lesson thrown in the mix. You can find all my various thoughts in the Blog section.","title":"Home"},{"location":"#welcome","text":"This is Sumitro. This is my personal blog. The content of this blog will mainly be technical, specifically about linux systems and its related technologies, with a random life lesson thrown in the mix. You can find all my various thoughts in the Blog section.","title":"Welcome!"},{"location":"posts/","text":"Blog Posts All my various blog posts are here, sorted reverse chronologically with tags. Use the find function of your browser to search for the tags. Complete Date Post Title Tags 15.07.2020 My Minimalist Applications linux , minimalism 14.07.2020 My Arch Install To-Do linux , minimalism , arch 13.07.2020 Minimal Ubuntu Installation linux , minimalism , ubuntu 08.07.2020 About This Site web , linux , minimalism 08.07.2020 Buy Why Terminal Apps? linux , minimalism 07.07.2020 Markdown Test test , web Incomplete I intend to write on these topics. But no ETA. Date Title Tags - But Why Pihole? systems , linux - My Hardware Setup systems - My Linux Setup linux , minimalism - But Why Custom Firmware For Router systems - But Why Custom ROM For Android systems - But Why Minimalism life","title":"Blog"},{"location":"posts/#blog-posts","text":"All my various blog posts are here, sorted reverse chronologically with tags. Use the find function of your browser to search for the tags.","title":"Blog Posts"},{"location":"posts/#complete","text":"Date Post Title Tags 15.07.2020 My Minimalist Applications linux , minimalism 14.07.2020 My Arch Install To-Do linux , minimalism , arch 13.07.2020 Minimal Ubuntu Installation linux , minimalism , ubuntu 08.07.2020 About This Site web , linux , minimalism 08.07.2020 Buy Why Terminal Apps? linux , minimalism 07.07.2020 Markdown Test test , web","title":"Complete"},{"location":"posts/#incomplete","text":"I intend to write on these topics. But no ETA. Date Title Tags - But Why Pihole? systems , linux - My Hardware Setup systems - My Linux Setup linux , minimalism - But Why Custom Firmware For Router systems - But Why Custom ROM For Android systems - But Why Minimalism life","title":"Incomplete"},{"location":"blog_posts/arch_install/","text":"My Arch Install To-Do While there are certainly no lack of guides available regarding the arch installation, I have put up one for myself just because it suits my setup more. By no means is this better than the official Arch Installation Wiki , but it's really verbose and considers EVERY possible edge case, which is good in some cases. I generally follow the guide by itsfoss which uses saner assumptions but I would like to add a few more points to it. Those who are reading this guide, I would encourage you to read both of them. Read itsfoss guide for a basic understanding, and the Arch Wiki in case you are facing issues. Assumptions You have installed grub and you are just about to reboot into your new arch install. You are chroot 'ed into your partition. Before you reboot, these are somethings you should do. Enable Networking Enable networking, otherwise you won't have network access after the reboot. Install networkmanager pacman -S networkmanager Enable networkmanager as a service systemctl enable NetworkManager.service Enable SSH I typically enable ssh in all my machines. You can skip this step if you don't want to. pacman -S openssh Enable ssh as a service systemctl enable sshd.service Create an account You should create a new account as you don't want to ssh as root , as it's heavily discouraged. useradd -m <username> passwd <username> You can choose to give this account root permission as well. Enable swap I typically keep a swap partition. As this point, it's just a force of habit, even though I don't use the hibernate feature on my machines. You can also use a swap file which you can check out here mkswap /dev/<swap partition> swapon -a Edit fstab I typically have a different partition for root and home . It has some advantages, like if your home fills up due to some bug your OS can still work since root is free. Also, you can create an image of your home partition easily. So make sure to edit your fstab such that on reboot both your home and swap partition are automatically mounted. The way to do it is as follows Check your partition UUID by typing blkid Make an entry in /etc/fstab with the UUID UUID=<the partition ID> /home ext4 defaults 0 0 UUID=<swap ID> swap swap defaults 0 0 Save and exit Now you can reboot and enjoy your Arch install. Post Installation I like to install the following programs to make my life easier in Arch. An AUR Helper - yay yay helps us download and install applications from the Arch User Repository , which is a community-maintained list of package descriptions for popular applications which are not available on the official Arch repository. Once you get used to AUR, you will not want to download and compile from source again. There are multiple AUR helpers; i decided to use yay simply because it's currently the most popular. To install yay , you need to install the git and base-devel package, clone yay and then install it. pacman -S base-devel git git clone https://aur.archlinux.org/yay.git cd yay makepkg -si Now you can install any package from the AUR using yay using the command yay -S <package name> . Make sure not to run yay as root. Check out my post regarding the different applications that I use here Happy Arch'ing!","title":"My Arch Install To-Do"},{"location":"blog_posts/arch_install/#my-arch-install-to-do","text":"While there are certainly no lack of guides available regarding the arch installation, I have put up one for myself just because it suits my setup more. By no means is this better than the official Arch Installation Wiki , but it's really verbose and considers EVERY possible edge case, which is good in some cases. I generally follow the guide by itsfoss which uses saner assumptions but I would like to add a few more points to it. Those who are reading this guide, I would encourage you to read both of them. Read itsfoss guide for a basic understanding, and the Arch Wiki in case you are facing issues.","title":"My Arch Install To-Do"},{"location":"blog_posts/arch_install/#assumptions","text":"You have installed grub and you are just about to reboot into your new arch install. You are chroot 'ed into your partition. Before you reboot, these are somethings you should do.","title":"Assumptions"},{"location":"blog_posts/arch_install/#enable-networking","text":"Enable networking, otherwise you won't have network access after the reboot. Install networkmanager pacman -S networkmanager Enable networkmanager as a service systemctl enable NetworkManager.service","title":"Enable Networking"},{"location":"blog_posts/arch_install/#enable-ssh","text":"I typically enable ssh in all my machines. You can skip this step if you don't want to. pacman -S openssh Enable ssh as a service systemctl enable sshd.service","title":"Enable SSH"},{"location":"blog_posts/arch_install/#create-an-account","text":"You should create a new account as you don't want to ssh as root , as it's heavily discouraged. useradd -m <username> passwd <username> You can choose to give this account root permission as well.","title":"Create an account"},{"location":"blog_posts/arch_install/#enable-swap","text":"I typically keep a swap partition. As this point, it's just a force of habit, even though I don't use the hibernate feature on my machines. You can also use a swap file which you can check out here mkswap /dev/<swap partition> swapon -a","title":"Enable swap"},{"location":"blog_posts/arch_install/#edit-fstab","text":"I typically have a different partition for root and home . It has some advantages, like if your home fills up due to some bug your OS can still work since root is free. Also, you can create an image of your home partition easily. So make sure to edit your fstab such that on reboot both your home and swap partition are automatically mounted. The way to do it is as follows Check your partition UUID by typing blkid Make an entry in /etc/fstab with the UUID UUID=<the partition ID> /home ext4 defaults 0 0 UUID=<swap ID> swap swap defaults 0 0 Save and exit Now you can reboot and enjoy your Arch install.","title":"Edit fstab"},{"location":"blog_posts/arch_install/#post-installation","text":"I like to install the following programs to make my life easier in Arch.","title":"Post Installation"},{"location":"blog_posts/arch_install/#an-aur-helper-yay","text":"yay helps us download and install applications from the Arch User Repository , which is a community-maintained list of package descriptions for popular applications which are not available on the official Arch repository. Once you get used to AUR, you will not want to download and compile from source again. There are multiple AUR helpers; i decided to use yay simply because it's currently the most popular. To install yay , you need to install the git and base-devel package, clone yay and then install it. pacman -S base-devel git git clone https://aur.archlinux.org/yay.git cd yay makepkg -si Now you can install any package from the AUR using yay using the command yay -S <package name> . Make sure not to run yay as root. Check out my post regarding the different applications that I use here Happy Arch'ing!","title":"An AUR Helper - yay"},{"location":"blog_posts/markdown_test/","text":"A Markdown Test Page Note : This page exists only to check how well the different markdown elements are rendered by this current theme. Other than that, there is nothing of value in this page. Header 1 Header 2 Header 3 Header 4 Header 5 Bullet points One Two Three Another bullet list Bird Cat Dog Numbered points Some Random Points Text Variants This is a bold line This line is in italics ~~Strikethrough text~~ This is a block quote All roads lead to Rome This word has a link to Google. Code Variants This is an inline code int foo = 'bar' This is a codeblock in C #include <stdio.h> int main () { printf ( \"Hello World\" ); return 0 ; } This is another way of writing a code block but in Python def main (): print ( \"Hello World\" ) if __name__ == \"__main__\" : main () This is a picture of a dog This is a Shiba This is a table Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1","title":"A Markdown Test Page"},{"location":"blog_posts/markdown_test/#a-markdown-test-page","text":"Note : This page exists only to check how well the different markdown elements are rendered by this current theme. Other than that, there is nothing of value in this page.","title":"A Markdown Test Page"},{"location":"blog_posts/markdown_test/#header-1","text":"","title":"Header 1"},{"location":"blog_posts/markdown_test/#header-2","text":"","title":"Header 2"},{"location":"blog_posts/markdown_test/#header-3","text":"","title":"Header 3"},{"location":"blog_posts/markdown_test/#header-4","text":"","title":"Header 4"},{"location":"blog_posts/markdown_test/#header-5","text":"Bullet points One Two Three Another bullet list Bird Cat Dog Numbered points Some Random Points","title":"Header 5"},{"location":"blog_posts/markdown_test/#text-variants","text":"This is a bold line This line is in italics ~~Strikethrough text~~ This is a block quote All roads lead to Rome This word has a link to Google.","title":"Text Variants"},{"location":"blog_posts/markdown_test/#code-variants","text":"This is an inline code int foo = 'bar' This is a codeblock in C #include <stdio.h> int main () { printf ( \"Hello World\" ); return 0 ; } This is another way of writing a code block but in Python def main (): print ( \"Hello World\" ) if __name__ == \"__main__\" : main () This is a picture of a dog This is a Shiba This is a table Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1","title":"Code Variants"},{"location":"blog_posts/meta/","text":"About This Site There are 4 components regarding building this site Development Testing Domain name Hosting Development My development and build area is actually a Raspberry Pi 3 running Ubuntu Server 20.04 LTS. This is mainly because I wanted to see how well does it work as a testbed. So far, development has been quite smooth. Opening large files can take a while but the delays are nothing too serious. All my requirements are satisfied. Content Generation I'm actually using a minimal static site generator called ssg by Roman Zolotarev, which I heard about from Wolfgang's Channel . It's light because it's written in simple shell with 180 LOC, which is just hilarious. No dependancies or extra libraries (other than lowdown which converts markdown to html among other formats) Styling ssg simply spits out html without any styling. So I had to search for some nice css templates for markdown. I thought it would be easy but it took some time to find something decent but not too heavy. I settled for themes by Typora which is actually meant for their application; a markdown editor. The current theme that i'm using is called NexT . It took some manual tweaking to get it just right, specifically getting the code blocks right. Testing I'm testing the website on the same Pi using Python's built in web-server. It can be easily started like this python3 -m http.server By default, it runs at port 8000 and hosts the current directory. Domain name I bought this domain name from GoDaddy . That's almost the defacto domain market place in India. Remember to properly redirect your domain to your host, otherwise your site will be unreachable. I used this resource to perform the redirection. Hosting Since the site is static, Github Pages is good enough. Conclusion I like this setup and I intend to keep working on this. Once the site has been setup, with the proper header/footer/theme, making content is quite convenient. Things to keep in mind Have a backup for your markdown content. Don't embed your fonts locally, unless your host has a fast connection. Use Google Fonts instead. Have a clean/build/deploy script. It saves a lot of time. Remember to trim your css file. Adding a custom 404 page looks nice.","title":"About This Site"},{"location":"blog_posts/meta/#about-this-site","text":"There are 4 components regarding building this site Development Testing Domain name Hosting","title":"About This Site"},{"location":"blog_posts/meta/#development","text":"My development and build area is actually a Raspberry Pi 3 running Ubuntu Server 20.04 LTS. This is mainly because I wanted to see how well does it work as a testbed. So far, development has been quite smooth. Opening large files can take a while but the delays are nothing too serious. All my requirements are satisfied.","title":"Development"},{"location":"blog_posts/meta/#content-generation","text":"I'm actually using a minimal static site generator called ssg by Roman Zolotarev, which I heard about from Wolfgang's Channel . It's light because it's written in simple shell with 180 LOC, which is just hilarious. No dependancies or extra libraries (other than lowdown which converts markdown to html among other formats)","title":"Content Generation"},{"location":"blog_posts/meta/#styling","text":"ssg simply spits out html without any styling. So I had to search for some nice css templates for markdown. I thought it would be easy but it took some time to find something decent but not too heavy. I settled for themes by Typora which is actually meant for their application; a markdown editor. The current theme that i'm using is called NexT . It took some manual tweaking to get it just right, specifically getting the code blocks right.","title":"Styling"},{"location":"blog_posts/meta/#testing","text":"I'm testing the website on the same Pi using Python's built in web-server. It can be easily started like this python3 -m http.server By default, it runs at port 8000 and hosts the current directory.","title":"Testing"},{"location":"blog_posts/meta/#domain-name","text":"I bought this domain name from GoDaddy . That's almost the defacto domain market place in India. Remember to properly redirect your domain to your host, otherwise your site will be unreachable. I used this resource to perform the redirection.","title":"Domain name"},{"location":"blog_posts/meta/#hosting","text":"Since the site is static, Github Pages is good enough.","title":"Hosting"},{"location":"blog_posts/meta/#conclusion","text":"I like this setup and I intend to keep working on this. Once the site has been setup, with the proper header/footer/theme, making content is quite convenient.","title":"Conclusion"},{"location":"blog_posts/meta/#things-to-keep-in-mind","text":"Have a backup for your markdown content. Don't embed your fonts locally, unless your host has a fast connection. Use Google Fonts instead. Have a clean/build/deploy script. It saves a lot of time. Remember to trim your css file. Adding a custom 404 page looks nice.","title":"Things to keep in mind"},{"location":"blog_posts/minimal_ubuntu/","text":"Truly Minimal Ubuntu Installation with a Window Manager I wanted to a have a real minimal linux installtion where I could decide exactly what packages I want. To truly embrace this ideology, you have to use Arch Linux, and being me, I was just too afraid to try it out. I eventually did, but that's for another day. Ubuntu Desktop has a minimal installation option but I it's still not minimal enough. The only way forward is to install the server edition of Ubuntu and then install your graphical environment. I've decided to use the i3 window manager. Assumptions You have a basic Ubuntu installation, possibly Ubuntu Server 20.04 You have set up proper network connectivity You have root access Pre-installation Steps We need to have the building blocks of a graphical UI, for which we need xorg . sudo apt install xorg xinit We now need to be able to compile i3 . We can use the i3 from apt , but I prefer to use i3-gaps which looks a bit nicer and is unfortunately not availble in the repos. Hence, we need the following packages for compiling and making. sudo apt install git make gcc autoconf Now, we install all the dependancies of i3-gaps sudo apt install libpango1.0-dev libyajl-dev libstartup-notification0-dev \\ libev-dev libtool libxkbcommon-dev libxkbcommon-x11-dev libxcb1-dev libxcb-randr0-dev \\ libxcb-util0-dev libxcb-icccm4-dev libxcb-keysyms1-dev libxcb-cursor-dev \\ libxcb-xinerama0-dev libxcb-xkb-dev libxcb-shape0-dev libxcb-xrm-dev xutils-dev Installing i3 Source Now that our build environment is ready, we can compile and install i3 There are 3 popular versions of i3 that I know of The original i3 i3-gaps by Airblader which has support for gaps between windows i3-gaps by resolved which has support for rounded corner for windows I prefer installing i3-gaps by resolved. However, the installation procedure is the same for all variants. Also, this might be a few commits behind i3-gaps . So clone, make and install i3 git clone https://github.com/resloved/i3 cd i3 autoreconf --force --install rm -rf build mkdir build cd build ../configure --prefix=/usr --sysconfdir=/etc make sudo make install At this point, your i3 installation is complete. Note : In case you get a dependancy error (there shouldn't be any), read the error output carefully. Install the missing packages and repeat the above step from scratch. Enabling i3 to run after login Till now, your i3 is ready but you need a way to initiate it after logging in. Which is why we installed xinit . Create ~/.xinitrc and edit it as follows #!/bin/sh exec /usr/bin/i3 Run startx in the terminal Your i3 WM should start up Now you have a minimal install of Ubuntu, running i3 . Conclusion Keep in mind, this setup is so barebones that some functions, that we take for granted in a standard \"bloated\" DEs, are missing. You need to create scripts for them OR find lightweight alternatives. Some lightweight alternatives which I use are Status-bar - polybar Login manager or a display manager - lightdm Program launcher - rofi Poweroff/reboot/logout menu - rofi again Display auto-detection system - xrandr Notification manager - dunst Wallpaper manager - nitrogen A good thing about all the above mentioned programs is that they are highly customizable, so you can set it exactly how you want it. You can think that you are creating your own desktop environment. Setting this up can be time-consuming, but you can be assured that there are no unneccessary backgroud processes. Happy tweaking!","title":"Truly Minimal Ubuntu Installation with a Window Manager"},{"location":"blog_posts/minimal_ubuntu/#truly-minimal-ubuntu-installation-with-a-window-manager","text":"I wanted to a have a real minimal linux installtion where I could decide exactly what packages I want. To truly embrace this ideology, you have to use Arch Linux, and being me, I was just too afraid to try it out. I eventually did, but that's for another day. Ubuntu Desktop has a minimal installation option but I it's still not minimal enough. The only way forward is to install the server edition of Ubuntu and then install your graphical environment. I've decided to use the i3 window manager.","title":"Truly Minimal Ubuntu Installation with a Window Manager"},{"location":"blog_posts/minimal_ubuntu/#assumptions","text":"You have a basic Ubuntu installation, possibly Ubuntu Server 20.04 You have set up proper network connectivity You have root access","title":"Assumptions"},{"location":"blog_posts/minimal_ubuntu/#pre-installation-steps","text":"We need to have the building blocks of a graphical UI, for which we need xorg . sudo apt install xorg xinit We now need to be able to compile i3 . We can use the i3 from apt , but I prefer to use i3-gaps which looks a bit nicer and is unfortunately not availble in the repos. Hence, we need the following packages for compiling and making. sudo apt install git make gcc autoconf Now, we install all the dependancies of i3-gaps sudo apt install libpango1.0-dev libyajl-dev libstartup-notification0-dev \\ libev-dev libtool libxkbcommon-dev libxkbcommon-x11-dev libxcb1-dev libxcb-randr0-dev \\ libxcb-util0-dev libxcb-icccm4-dev libxcb-keysyms1-dev libxcb-cursor-dev \\ libxcb-xinerama0-dev libxcb-xkb-dev libxcb-shape0-dev libxcb-xrm-dev xutils-dev","title":"Pre-installation Steps"},{"location":"blog_posts/minimal_ubuntu/#installing-i3","text":"Source Now that our build environment is ready, we can compile and install i3 There are 3 popular versions of i3 that I know of The original i3 i3-gaps by Airblader which has support for gaps between windows i3-gaps by resolved which has support for rounded corner for windows I prefer installing i3-gaps by resolved. However, the installation procedure is the same for all variants. Also, this might be a few commits behind i3-gaps . So clone, make and install i3 git clone https://github.com/resloved/i3 cd i3 autoreconf --force --install rm -rf build mkdir build cd build ../configure --prefix=/usr --sysconfdir=/etc make sudo make install At this point, your i3 installation is complete. Note : In case you get a dependancy error (there shouldn't be any), read the error output carefully. Install the missing packages and repeat the above step from scratch.","title":"Installing i3"},{"location":"blog_posts/minimal_ubuntu/#enabling-i3-to-run-after-login","text":"Till now, your i3 is ready but you need a way to initiate it after logging in. Which is why we installed xinit . Create ~/.xinitrc and edit it as follows #!/bin/sh exec /usr/bin/i3 Run startx in the terminal Your i3 WM should start up Now you have a minimal install of Ubuntu, running i3 .","title":"Enabling i3 to run after login"},{"location":"blog_posts/minimal_ubuntu/#conclusion","text":"Keep in mind, this setup is so barebones that some functions, that we take for granted in a standard \"bloated\" DEs, are missing. You need to create scripts for them OR find lightweight alternatives. Some lightweight alternatives which I use are Status-bar - polybar Login manager or a display manager - lightdm Program launcher - rofi Poweroff/reboot/logout menu - rofi again Display auto-detection system - xrandr Notification manager - dunst Wallpaper manager - nitrogen A good thing about all the above mentioned programs is that they are highly customizable, so you can set it exactly how you want it. You can think that you are creating your own desktop environment. Setting this up can be time-consuming, but you can be assured that there are no unneccessary backgroud processes. Happy tweaking!","title":"Conclusion"},{"location":"blog_posts/my_apps/","text":"My Choice of Minimalist Apps These are the terminal-based apps that are part of my daily workflow. They might be available in your OS's repository, otherwise, you can always download from Github. ranger Terminal File Manager | Link This is my goto file manager. It's quite fast, vim based shortcuts and plenty customizable nnn Terminal File Manager | Link This is my current file manager. It's even faster than ranger because it's written in C ( ranger is written in Python). The design choices of this application is a bit out of the oridinary but it's very speedy, specially in low-end devices, such as Raspberry Pi's. cmus Terminal Music Player | Link This is a simple music player which is plenty fast. It follows a server-client model. So you can send commands for volume control or previous/next track, even remotely. tremc Terminal Torrent Manager | Link This needs to be used in conjunction with transmission , which is the actual torrent client. Normally, people use the transmission-gtk package to interact. But why not use a curses variant? It covers only the basic usecases though. speedometer Terminal Network Usage Monitor | Link Plots a graph of the network usage. Simple and useful. tty-clock Terminal Clock | Link If you wanted a clock for the terminal, this is it. cli-visualizer Terminal Music Visualizer | Link If you want a cute little distraction in your terminal which dances with your music, this would do it. Conclusion Other than the ones mentioned above, some apps are just too popular to warrant a special mention such as vim htop screen Once you get used to terminal based minimalist apps, you will start to see that traditional GUI apps look very \"busy\", as if the app is \"advertising\" what it wants to do. There is less hand-holding in terminal apps.","title":"My Choice of Minimalist Apps"},{"location":"blog_posts/my_apps/#my-choice-of-minimalist-apps","text":"These are the terminal-based apps that are part of my daily workflow. They might be available in your OS's repository, otherwise, you can always download from Github.","title":"My Choice of Minimalist Apps"},{"location":"blog_posts/my_apps/#ranger","text":"Terminal File Manager | Link This is my goto file manager. It's quite fast, vim based shortcuts and plenty customizable","title":"ranger"},{"location":"blog_posts/my_apps/#nnn","text":"Terminal File Manager | Link This is my current file manager. It's even faster than ranger because it's written in C ( ranger is written in Python). The design choices of this application is a bit out of the oridinary but it's very speedy, specially in low-end devices, such as Raspberry Pi's.","title":"nnn"},{"location":"blog_posts/my_apps/#cmus","text":"Terminal Music Player | Link This is a simple music player which is plenty fast. It follows a server-client model. So you can send commands for volume control or previous/next track, even remotely.","title":"cmus"},{"location":"blog_posts/my_apps/#tremc","text":"Terminal Torrent Manager | Link This needs to be used in conjunction with transmission , which is the actual torrent client. Normally, people use the transmission-gtk package to interact. But why not use a curses variant? It covers only the basic usecases though.","title":"tremc"},{"location":"blog_posts/my_apps/#speedometer","text":"Terminal Network Usage Monitor | Link Plots a graph of the network usage. Simple and useful.","title":"speedometer"},{"location":"blog_posts/my_apps/#tty-clock","text":"Terminal Clock | Link If you wanted a clock for the terminal, this is it.","title":"tty-clock"},{"location":"blog_posts/my_apps/#cli-visualizer","text":"Terminal Music Visualizer | Link If you want a cute little distraction in your terminal which dances with your music, this would do it.","title":"cli-visualizer"},{"location":"blog_posts/my_apps/#conclusion","text":"Other than the ones mentioned above, some apps are just too popular to warrant a special mention such as vim htop screen Once you get used to terminal based minimalist apps, you will start to see that traditional GUI apps look very \"busy\", as if the app is \"advertising\" what it wants to do. There is less hand-holding in terminal apps.","title":"Conclusion"},{"location":"blog_posts/terminal_apps/","text":"But Why Terminal Apps? Ever since I switched to i3 , I have simply become fascinated by terminal apps. What are terminal apps? These are any app which runs right inside the terminal. These apps don't have a GUI and are mostly keyboard-centric. I've listed all the reasons why I think they are cool. Pros Extremely fast startup Low resource usage Less dependancies -> More stable Remote access is very easy as long as you have ssh Community-driven, free and very hackable [BONUS] They make you look like a hacker /s Cons Esoteric design - There is a slight learning curve, and sometimes very high. Mostly keyboard-driven, which is why they scare novice PC users. Hard to access through mobile As they are community-driven, only the popular ones are still actively developed A lot of time needs to be invested to tune it to your liking, but it's a one time effort You can find my choice of terminal apps over here","title":"But Why Terminal Apps?"},{"location":"blog_posts/terminal_apps/#but-why-terminal-apps","text":"Ever since I switched to i3 , I have simply become fascinated by terminal apps. What are terminal apps? These are any app which runs right inside the terminal. These apps don't have a GUI and are mostly keyboard-centric. I've listed all the reasons why I think they are cool.","title":"But Why Terminal Apps?"},{"location":"blog_posts/terminal_apps/#pros","text":"Extremely fast startup Low resource usage Less dependancies -> More stable Remote access is very easy as long as you have ssh Community-driven, free and very hackable [BONUS] They make you look like a hacker /s","title":"Pros"},{"location":"blog_posts/terminal_apps/#cons","text":"Esoteric design - There is a slight learning curve, and sometimes very high. Mostly keyboard-driven, which is why they scare novice PC users. Hard to access through mobile As they are community-driven, only the popular ones are still actively developed A lot of time needs to be invested to tune it to your liking, but it's a one time effort You can find my choice of terminal apps over here","title":"Cons"},{"location":"personal/about/","text":"About Me My name is Sumitro Bhaumik. I live in Kolkata, India. I'm currently pursuing a PhD in Computer Science in IIT Kharagpur. This is my academic website I enjoy a little bit of coding, a little bit of gaming, dabbling in linux systems. I occasionally take photographs as well. Quotes I Live By \"Live and let live.\" \"The problem is not the problem. The problem is the attitude towards the problem.\" \"Winner never quit. Quitters never win.\" \"No sacrifice, no victory.\"","title":"Me"},{"location":"personal/about/#about-me","text":"My name is Sumitro Bhaumik. I live in Kolkata, India. I'm currently pursuing a PhD in Computer Science in IIT Kharagpur. This is my academic website I enjoy a little bit of coding, a little bit of gaming, dabbling in linux systems. I occasionally take photographs as well.","title":"About Me"},{"location":"personal/about/#quotes-i-live-by","text":"\"Live and let live.\" \"The problem is not the problem. The problem is the attitude towards the problem.\" \"Winner never quit. Quitters never win.\" \"No sacrifice, no victory.\"","title":"Quotes I Live By"},{"location":"personal/contact/","text":"Contact You may only contact me on my mail which is sumitros < at > gmail < dot > com Other methods of contacting Social Media Status Facebook Inactive Whatsapp Active Instagram Minimal activity Twitter Minimal activity Linkedin Minimal activity Github Active","title":"Contact"},{"location":"personal/contact/#contact","text":"You may only contact me on my mail which is sumitros < at > gmail < dot > com Other methods of contacting Social Media Status Facebook Inactive Whatsapp Active Instagram Minimal activity Twitter Minimal activity Linkedin Minimal activity Github Active","title":"Contact"}]}